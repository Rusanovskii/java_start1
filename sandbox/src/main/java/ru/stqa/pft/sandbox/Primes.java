package ru.stqa.pft.sandbox;

public class Primes {
    public static boolean isPrime(int n) {
        // переменная счетчик for для числа n которое последовательно будет делиться на разные числа
        for (int i = 2; i < n; i ++) {
            // проверяем все числа от i = 2, но меньше n и при каждой итерации нужно i увеличивать на 1
            if (n % i == 0) {
                // если n делится на i без остатка, то завершить цикл, а если не равно то идет дальше
                return false;
            }
        }
        // продолжается, так как не остановилась ранее;
        return true;
    }

    public static boolean isPrimeFast(int n) {
        // делим только на половину чисел, итераций в два раза меньше
        for (int i = 2; i < n/2; i ++) {
            // проверяем все числа от i = 2, но меньше n и при каждой итерации нужно i увеличивать на 1
            if (n % i == 0) {
                // если n делится на i без остатка, то завершить цикл, а если не равно то идет дальше
                return false;
            }
        }
        // продолжается, так как не остановилась ранее;
        return true;
    }
    public static boolean isPrimeMoreFast(int n) {
        // еще быстрее
        int m = (int) Math.sqrt(n);
        for (int i = 2; i < m; i ++) {
            // проверяем все числа от i = 2, но меньше n и при каждой итерации нужно i увеличивать на 1
            if (n % i == 0) {
                // если n делится на i без остатка, то завершить цикл, а если не равно то идет дальше
                return false;
            }
        }
        // продолжается, так как не остановилась ранее;
        return true;
    }
    public static boolean isPrimeWhile(int n) {
        int i = 2;
        while (i < n && n % i != 0) {
            i ++;
    }
        // продолжается, так как не остановилась ранее, пока не будет найден числитель
        return i == n;
    }


    public static boolean isPrime(long n) {
            // переменная счетчик for для числа n которое последовательно будет делиться на разные числа
            for (long i = 2; i < n; i ++) {
                // проверяем все числа от i = 2, но меньше n и при каждой итерации нужно i увеличивать на 1
                if (n % i == 0) {
                    // если n делится на i без остатка, то завершить цикл, а если не равно то идет дальше
                    return false;
                }
            }
            // продолжается, так как не остановилась ранее;
            return true;
        }
}
